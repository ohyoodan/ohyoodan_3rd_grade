게임 루프
스케줄링

일시정지?

겟 컴포먼트 = 템플릿 사용했음

함수포인터 배열을 만들어 함수를 여러개 가지고 있을 수 있음

랭킹 = 이름 세글자




게임엔진 + 런 게임
C++로 개발((OpenGL로 구현한 경우 가산점을 10점 드림)) 할 친구들은 유니티와 유사한 구조로



Scene이라는 클래스 (Unity 의 Scene)

Object 라는 클래스 (Unity 의 GameObject)



세가지 객체를 만들고 이것을 유니티와 유사하게 동작하도록 구현해야합니다.

그리고 메모리 누수시 감점입니다.

설명을 간단히 하자면



main함수는 기존에 해왔던대로 알아서들 GameLoop를 만드시고 ㅋㅋ



Scene에는  

1. ScreenBuffer(화면 배열)와 화면의 크기를 저장한다.

2. Scene에서 사용하고 있는 Object의 리스트를 std::vector를 이용해서 만든다.(Unity의 Hierarchy와 동일 기능)

참고자료 : https://github.com/Hanneoul/PP01/blob/master/PP06/main.cpp (작년도 프로그래밍 패턴 강의자료)

3. Draw() 라는 함수를 만들어 Active한 Object의 Render를 호출하고 나서 

ScreenBuffer를 cout으로 화면에 한번에 그린다.

4. 화면을 clear해주는 기능(InitScreenBuf() 말고 ClearScreenBuf()이런 형식으로)이 있으면 좋다.



Object는

1. Render()에는 Scene에서 제공하는 ScreenBuffer를 매개변수로 받고, 거기다가 이것저것 그릴 내용을 그릴것 (Object의 모양을 그릴것)

2. position x,y 값을 가지고 있어야 Object를 그릴 수 있음.

3. 다양한 Object를 만드려면 이 클래스를 상속해서 만들면 됨.

   SnakeBody : public Object

   {};



   이런식으로 만들면됨





추가 참고 자료입니다 

- 1학년 C버전 스크린 버퍼 제작 샘플

https://github.com/Hanneoul/Yuhan_C/tree/main/Project02(HW)



- 작년도 프로그래밍 패턴 5주차 게임엔진 강의 내용

https://github.com/Hanneoul/PP01/tree/master/PP05

(이번학기 저희 강의자료와는 다릅니다. Component와 Scene없이 그냥 Object란걸 만들고 상속해서 GameObject를 GameLoop에서 직접 사용한 예시입니다. 개발에 참고만 하세요.)


보고서는 추가된 형식이 있으니 꼭 확인하시고


이름(학번) : 

GIT 주소 : 
GIT Commit Log : 


------------------------------------------------------
유니티로 개발할 친구들은

Image 나 Animation, Mesh등의 Asset은 알아서 구해서 하되 기능을 구현한 Script는 받지 말 것.

Unity Event를 활용하여 모든 이벤트를 중앙 GameManager 객체가 처리하도록 제작.

(GameManager의 Update가 C++의 main함수의 GameLoop처럼 사용할것)



Component는 Rigidbody, Colider 사용하지 말것.




이름(학번) : 

GIT 주소 : 
GIT Commit Log : 


--------------------------------------------------------------------

구글의 점프 게임



* 기본적으로 총 3개의 오브젝트를 스크롤 하여 화면을 구성한다.

예시 : 

1: 구름

2: 멀리 있는 산

3(빠름): 땅



타이틀 보여주고



* 게임 시작 -> 죽었을때 다시시작 하는둥 완벽하게 동작하는 게임으로 만들것.

* 1위~10위까지 랭킹 만들 것

* 게임 일시중지 및 재개 필요 ( 휴대폰이라고 생각하고 만들것 )

* 장애물 최소 2가지 (고정식 / 움직이는장애물)

* 스테이로더 만들어 놓을것. (스테이지는 테스트용으로 랭킹에 클리어한 스테이지와 점수 기록할것)

  * 가산점 요소! (5점)

    * 점점 속도가 붙도록!

    * 배경이 속도에 따라 달라지도록!  

* 캐릭터랑 장애물이랑 만나면 바로 gameOver

* 모든 gameObject는 Object Pool을 이용해서 관리할것.

    * Instantiate(), new 키워드는 Initialize 시에만 호출 (게임 중간에 호출됐을때 상황에따라 감점)
    * Destroy()는 Release시에만 호출